{
    "routes": [
        {
            "title": "Acquire composite facilities",
            "url": "/acquireCompositeFacilities",
            "query": "SELECT FacilityId as facility_id, FacilityCode as facility_code, FacilityName as facility_name FROM [dbo].[DimFacility]",
            "filter": false
        },
        {
            "title": "Find summary by last month",
            "url": "/overview/findSummaryByLastMonth",
            "query": "DECLARE @CurrentMonth INT; DECLARE @CurrentYear INT; DECLARE @LastDayOfPreviousMonth INT; SET @CurrentMonth = MONTH(getdate()) - 1; SET @CurrentYear = YEAR(getdate()); SET @LastDayOfPreviousMonth = DAY(EOMONTH(GETDATE())) DECLARE @PreviousMonthLastDateIdInString VARCHAR(10); DECLARE @PreviousMonthLastDateIdInINT INT; SET @PreviousMonthLastDateIdInString = CAST(@CurrentYear AS VARCHAR) + CASE WHEN @CurrentMonth < 10 THEN +'0'+ CAST(@CurrentMonth AS VARCHAR) ELSE CAST(@CurrentMonth AS VARCHAR) END + CAST(@LastDayOfPreviousMonth AS VARCHAR); SET @PreviousMonthLastDateIdInINT = CAST(@PreviousMonthLastDateIdInString AS INT) SELECT TotalScreened,TotalScreenedLastMonth, Eligible,EligibleLastMonth, Enrolled,EnrolledLastMonth, Tested,TestedLastMonth, Positive,PositiveLastMonth FROM ( SELECT (SELECT COUNT(Screened) FROM [dbo].[FactMortality] p WHERE Screened = 1 ) AS TotalScreened, (SELECT COUNT(Screened) FROM [dbo].[FactMortality] p WHERE Screened = 1 and ReviewDate <= @PreviousMonthLastDateIdInINT and ReviewDate is not null ) AS TotalScreenedLastMonth , (SELECT Count(Eligible) Eligible FROM [dbo].[FactMortality] p WHERE Eligible = 1 ) as Eligible, (SELECT Count(Eligible) Eligible FROM [dbo].[FactMortality] p WHERE Eligible = 1 and ReviewDate <= @PreviousMonthLastDateIdInINT and ReviewDate is not null) as EligibleLastMonth, (SELECT sum( Enrolled) from [dbo].[FactMortality] Where Enrolled = 1 and Enrolled is not null and barcode is not null) AS Enrolled, (SELECT sum( Enrolled) from [dbo].[FactMortality] Where Enrolled = 1 and Enrolled is not null and barcode is not null and ReviewDate <= @PreviousMonthLastDateIdInINT and ReviewDate is not null ) AS EnrolledLastMonth, (SELECT sum( SampleTested) from [dbo].[FactMortality] Where SampleTested = 1 and SampleTested is not null and barcode is not null) AS Tested, (SELECT sum( SampleTested) from [dbo].[FactMortality] Where SampleTested = 1 and SampleTested is not null and barcode is not null and ReviewDate <= @PreviousMonthLastDateIdInINT and ReviewDate is not null ) AS TestedLastMonth , (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Positive, (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null and ReviewDate <= @PreviousMonthLastDateIdInINT and ReviewDate is not null) AS PositiveLastMonth ) A",
            "filter": false
        },
        {
            "title": "Find summary",
            "url": "/overview/findSummary",
            "query": "SELECT TotalScreened, Eligible, CAST((Eligible * 100.0 / NULLIF(TotalScreened, 0))AS INT) PercentEligible, Enrolled, CAST((Enrolled * 100.0 / NULLIF(Eligible, 0))AS INT) PercentEnrolled, Tested, CAST(( Tested* 100.0 / NULLIF(enrolled, 0))AS INT) PercentTested, Positive, CAST(( Positive* 100.0 / NULLIF(Tested, 0))AS INT) PercentPositive FROM ( SELECT (SELECT COUNT(Screened) FROM [dbo].[FactMortality] p WHERE Screened = 1 ) AS TotalScreened , (SELECT Count(Eligible) Eligible FROM [dbo].[FactMortality] p WHERE Eligible = 1) as Eligible, (SELECT sum( SampleTested) from [dbo].[FactMortality] Where SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Enrolled, (SELECT sum( SampleTested) from [dbo].[FactMortality] Where SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Tested , (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Positive ) A",
            "filter": false
        },
        {
            "title": "Find screening and enrolment cascade",
            "url": "/overview/findScreeningEnrolmentCascade",
            "query": "SELECT count(CASE WHEN Screened = 1 THEN 1 ELSE 0 END) ScreenedNumber, sum(CASE WHEN Eligible = 1 THEN 1 ELSE 0 END) EligibleNumber, sum(CASE WHEN SampleTested = 1 And SampleTested IS NOT NULL and barcode IS NOT NULL THEN 1 ELSE 0 END) EnrolledNumber, sum(CASE WHEN SampleTested = 1 THEN 1 ELSE 0 END) TestedNumber, sum(CASE WHEN Covid19Positive = 1 And SampleTested = 1 and SampleTested IS NOT NULL and barcode IS NOT NULL THEN 1 ELSE 0 END) PositiveNumber FROM [dbo].[FactMortality] p INNER JOIN DimDate D On P.ReviewDate = D.DateKey INNER JOIN DimFacility F on P.Facility = F.FacilityId",
            "filter": true
        },
        {
            "title": "Find positivity by age ground and gender",
            "url": "/overview/findPositivityByAgeGender",
            "query": "SELECT Sum(p.Covid19Positive) As PositiveNumber, (SELECT SexValue from [dbo].[DimSex] where SexId = sex) Gender, (SELECT AgeGroup from [dbo].[DimAgeGroup] where AgeGroupId = p.AgeGroup) AgeGroup FROM [dbo].[FactMortality] p WHERE Covid19Positive = 1 and SampleTested = 1 and SampleTested is not null and barcode is not null GROUP BY sex, AgeGroup",
            "filter": false
        },
        {
            "title": "Find overall positivity by facility",
            "url": "/overview/findOverallPositivityByFacility",
            "query": "SELECT count(SampleTested) EnrolledNumber, sum(Covid19Positive) Covid19Positive, (SELECT FacilityName FRoM [dbo].[DimFacility] where FacilityId = Facility) Facility FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by Facility",
            "filter": false
        },
        {
            "title": "Find over time",
            "url": "/overview/findOverTime",
            "query": "SELECT count(SampleTested) SampleTested, sum(Covid19Positive) CovidPositive, EpiWeek FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by EpiWeek",
            "filter": false
        },
        {
            "title": "Find cascade",
            "url": "/screening/findCascade",
            "query": "SELECT TotalScreened, Eligible, Enrolled FROM (SELECT (SELECT COUNT(Screened) FROM [dbo].[FactMortality] p WHERE Screened = 1 ) AS TotalScreened , (SELECT Count(Eligible) Eligible FROM [dbo].[FactMortality] p WHERE Eligible = 1) as Eligible, (SELECT sum( SampleTested) FROM [dbo].[FactMortality] WHERE SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Enrolled, (SELECT sum( SampleTested) FROM [dbo].[FactMortality] WHERE SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Tested , (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null ) AS Positive) A",
            "filter": false
        },
        {
            "title": "Find by facility",
            "url": "/screening/findScreeningByFacility",
            "query": "SELECT sum(Screened) Screened, COUNT(SampleTested) Enrolled, SUM(Covid19Positive) Covid19Positive, (SELECT FacilityName FRoM [dbo].[DimFacility] where FacilityId = Facility) Facility FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by Facility",
            "filter": false
        },
        {
            "title": "Find over time",
            "url": "/screening/findScreeningOvertime",
            "query": "SELECT sum(Screened) Screened, EpiWeek, (SELECT [Month] FROM [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek )[Month], (SELECT [Year] FROM [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek ) [Year] FROM [dbo].[FactMortality] p WHERE SampleTested = 1 or Enrolled = 1 GROUP BY EpiWeek",
            "filter": false
        },
        {
            "title": "Find by gender",
            "url": "/enrolment/findByGender",
            "query": "SELECT EnrolledMale, EnrolledFemale, TestedMale, TestedFemale, PositiveMale, PositiveFemale FROM (SELECT (SELECT sum( enrolled) from [dbo].[FactMortality] Where enrolled = 1 and SEX = 1 and barcode is not null ) AS EnrolledMale, (SELECT sum( Enrolled) from [dbo].[FactMortality] Where Enrolled = 1 and SEX = 2 and barcode is not null ) AS EnrolledFemale, (SELECT sum( SampleTested) FROM [dbo].[FactMortality] WHERE SampleTested = 1 and sex =1 and barcode is not null ) AS TestedMale , (SELECT sum( SampleTested) FROM [dbo].[FactMortality] WHERE SampleTested = 1 and sex =2 and barcode is not null ) AS TestedFemale , (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE Covid19Positive = 1 and sex = 1 and barcode is not null ) AS PositiveMale, (SELECT sum(Covid19Positive) Positive FROM [dbo].[FactMortality] p WHERE Covid19Positive = 1 and sex = 2 and barcode is not null ) AS PositiveFemale) A",
            "filter": false
        },
        {
            "title": "Find by age group and gender",
            "url": "/enrolment/findByAgeGender",
            "query": "SELECT sum( enrolled) as EnrolledNumber, (SELECT SexValue from [dbo].[DimSex] where SexId = sex) Gender, (SELECT AgeGroup from [dbo].[DimAgeGroup] where AgeGroupId = P.AgeGroup ) AgeGroup from [dbo].[FactMortality] P Where enrolled = 1 Group by Sex, AgeGroup",
            "filter": false
        },
        {
            "title": "Find by facility",
            "url": "/enrolment/findByFacility",
            "query": "SELECT count(SampleTested) EnrolledNumber, sum(Covid19Positive) Covid19Positive, (SELECT FacilityName FRoM [dbo].[DimFacility] where FacilityId = Facility) Facility FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by Facility",
            "filter": false
        },
        {
            "title": "Find by over time",
            "url": "/enrolment/findOverTime",
            "query": "SELECT sum(Eligible) ElligibleNumber, sum(enrolled) EnrolledNumber, EpiWeek, (SELECT [Month] FROM [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek )[Month], (SELECT [Year] FROM [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek ) [Year] FROM [dbo].[FactMortality] p WHERE eligible = 1 or Enrolled = 1 GROUP BY EpiWeek",
            "filter": false
        },
        {
            "title": "Find by status",
            "url": "/results/findByStatus",
            "query": "SELECT SUM (CASE WHEN Covid19Positive =1 THEN Covid19Positive else 0 END ) Covid19Positive, Count( CASE WHEN Covid19Positive =0 THEN Covid19Positive else 0 END) Covid19Negative FROM [dbo].[FactMortality] WHere Enrolled = 1",
            "filter": false
        },
        {
            "title": "Find by health facility",
            "url": "/results/findByFacility",
            "query": "SELECT COUNT(SampleTested) SampleTested , SUM(Covid19Positive) Covid19Positive, (COUNT(SampleTested) - SUM(Covid19Positive)) Covid19Negative, (SELECT FacilityName FRoM [dbo].[DimFacility] where FacilityId = Facility) Facility FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by Facility",
            "filter": false
        },
        {
            "title": "Find by age group and gender",
            "url": "/results/findByAgeGender",
            "query": "SELECT sum(Covid19Positive) Covid19Positive, (SELECT AgeGroup FRoM [dbo].[DimAgeGroup] where AgeGroupId = p.AgeGroup) AgeGroup, (SELECT SexValue FRoM [dbo].[DimSex] where SexId = p.Sex) Gender FROM [dbo].[FactMortality] p WHERE SampleTested = 1 and SampleTested is not null and barcode is not null Group by AgeGroup, sex",
            "filter": false
        },
        {
            "title": "Find positivity over time",
            "url": "/results/findByPositivityOverTime",
            "query": "SELECT count(SampleTested) SampleTested, sum(Covid19Positive) Covid19Positive, EpiWeek, (select [Month] from [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek ) [Month], (select [Year] from [dbo].[DimEpiWeek] where WeekKey = P.EpiWeek ) [Year] FROM [dbo].[FactMortality] p WHERE SampleTested =1 and SampleTested is not null and barcode is not null Group by EpiWeek;",
            "filter": false
        }
    ]
}